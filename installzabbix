## This script is used to install and update Zabbix agent version 2 or version 1 via GPO
#
## Author: https://github.com/Padl3xx
# Modified by https://github.com/ashleyfarrall
## The script starts the GPO when the computer starts, it is applied to computers, not users.
## Create a new GPO, go to, Computer Configuration -> Policies -> Windows Settings -> Scripts -> Startup -> Powershell Scripts -> Add.
## Don't forget to link the GPO on specified OU :-)
## It should probably work if you run the installation directly from your computer, but I haven't tried that.

# Construct the FQDN (Fully Qualified Domain Name) of the local computer
$FQDN = (Get-WmiObject Win32_ComputerSystem).DNSHostName + "." + (Get-WmiObject Win32_ComputerSystem).Domain

# Check the Windows version
$OS = Get-WmiObject -Class Win32_OperatingSystem
$OSVersion = $OS.Version

# Check the OS architecture
$OSArchitecture = (wmic os get osarchitecture | Select-String -Pattern "32-bit|64-bit").ToString().Trim()

# Variables for Zabbix Agent 2 (64-bit only)
$ZabbixInstallationMSI_Agent2 = "\\192.168.2.37\DFS_Share\Shared\GPO\Zabbix\agent2\zabbix_agent2-6.4.11-windows-amd64-openssl.msi"
$ZabbixSoftwareName_Agent2 = "Zabbix Agent 2 (64-bit)"
$ZabbixAgentVersion_Agent2 = "6.4.11"

# Variables for Zabbix Agent 1 (64-bit and 32-bit)
$ZabbixInstallationMSI_Agent1_64 = "\\192.168.2.37\DFS_Share\Shared\GPO\Zabbix\agent1\zabbix_agent-6.4.15-windows-amd64-openssl.msi"
$ZabbixInstallationMSI_Agent1_32 = "\\192.168.2.37\DFS_Share\Shared\GPO\Zabbix\agent1\zabbix_agent-6.4.15-windows-i386-openssl.msi"
$ZabbixSoftwareName_Agent1_64 = "Zabbix Agent (64-bit)"
$ZabbixSoftwareName_Agent1_32 = "Zabbix Agent (32-bit)"
$ZabbixAgentVersion_Agent1 = "6.4.15"

# Determine which agent to install based on Windows version and architecture
if ([version]$OSVersion -ge [version]"10.0") {
    # Windows version is greater than or equal to Windows 10
    $ZabbixInstallationMSI = $ZabbixInstallationMSI_Agent2
    $ZabbixSoftwareName = $ZabbixSoftwareName_Agent2
    $ZabbixAgentVersion = $ZabbixAgentVersion_Agent2
} else {
    # Windows version is less than Windows 10
    if ($OSArchitecture -match "64-bit") {
        $ZabbixInstallationMSI = $ZabbixInstallationMSI_Agent1_64
        $ZabbixSoftwareName = $ZabbixSoftwareName_Agent1_64
    } elseif ($OSArchitecture -match "32-bit") {
        $ZabbixInstallationMSI = $ZabbixInstallationMSI_Agent1_32
        $ZabbixSoftwareName = $ZabbixSoftwareName_Agent1_32
    } else {
        Write-Output "Unknown OS architecture: $OSArchitecture"
        exit
    }
    $ZabbixAgentVersion = $ZabbixAgentVersion_Agent1
}

$ZabbixServerIP = "10.4.1.50"
#$ZabbixInstallationFolder = "\\$FQDN\c$\Program Files\Zabbix Agent\"
#$ZabbixPluginFolder = "\\yourdomain.com\NETLOGON\ZabbixAgent\zabbix_agent.d\"
#$ZabbixScriptsFolder = "\\yourdomain.com\NETLOGON\ZabbixAgent\scripts"

# Be careful what you change here

$InstalledZabbixVersion = (Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -eq $ZabbixSoftwareName }).Version

if ([string]::IsNullOrEmpty($InstalledZabbixVersion)) {
    $InstalledVersion = [version]"0.0.0"
} else {
    # Extract the major version from the installed version
    $InstalledVersion = [version]$InstalledZabbixVersion
}

$Arguments = "SERVER=$ZabbixServerIP SERVERACTIVE=$ZabbixServerIP HOSTMETADATA=Windows HOSTNAME=$FQDN /qn"

if ($InstalledVersion -lt [version]$ZabbixAgentVersion) {
    # The installed version is different from the desired version, so perform the installation or update

    if (Test-Path $ZabbixInstallationMSI) {
        # The installation file is available, so start the installation process
        Start-Process -FilePath "$ZabbixInstallationMSI" -ArgumentList "$Arguments" -Wait
        #Copy-Item -Path @($ZabbixPluginFolder, $ZabbixScriptsFolder) -Destination $ZabbixInstallationFolder -Force -Recurse
    } else {
        # The installation file is not available, exit the script
        exit
    }
}
## Function to update plugin and scripts folders if changes are detected
#if (!(Test-Path -Path "$ZabbixInstallationFolder\zabbix_agent.d" -PathType Container)) {
## if not exist, folder is created
#    New-Item -ItemType Directory -Path "$ZabbixInstallationFolder\zabbix_agent.d" -Force
#}
#
#if (!(Test-Path -Path "$ZabbixInstallationFolder\scripts" -PathType Container)) {
## if not exist, folder is created
#    New-Item -ItemType Directory -Path "$ZabbixInstallationFolder\scripts" -Force
#}
#
## Function to synchronize files of specified folders
#function Sync-Folder {
#    param(
#        [string]$sourceFolder,
#        [string]$destinationFolder
#    )
#    
#    $sourceFiles = Get-ChildItem -Path $sourceFolder -File
#    foreach ($file in $sourceFiles) {
#        $destinationFile = Join-Path -Path $destinationFolder -ChildPath $file.Name
#        if (!(Test-Path -Path $destinationFile -PathType Leaf)) {
#            # sync
#            Copy-Item -Path $file.FullName -Destination $destinationFolder
#        }
#    }
#}
#
## Sync files from given folders
#Sync-Folder -sourceFolder $ZabbixPluginFolder -destinationFolder "$ZabbixInstallationFolder\zabbix_agent.d\"
#Sync-Folder -sourceFolder $ZabbixScriptsFolder -destinationFolder "$ZabbixInstallationFolder\scripts\"
